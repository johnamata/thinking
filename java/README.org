#+TITLE: some notes

Some of the things I've learned from going over the algo problems i've solved here that I feel are important for me to review every now and then

* import
- essentials:
#+BEGIN_SRC java
import java.io.*;
import java.util.*;
#+END_SRC
* input
- hasNext()
- Character.getNumericValue()
- Integer.parseInt()
- Double.parseDouble()
- fastio templates: http://neerc.ifmo.ru/trains/information/Template.java
- other fastio templates to get inspo from: see Java submissions of [[https://codeforces.com/profile/Petr][Petr]], [[https://codeforces.com/profile/eatmore][eatmore]] 

* Numbers
- if number is over 2 billion value (either positive/negative), go with double or start thinking about bigintegers
- getting number of digits in a number, we can convert it to strings or use logarithms

#+BEGIN_SRC 
//best use is String.valueOf() as we dont need to work with wrappers unlike if we use toString()
//here's a sample code using it for leetcode #1295, find numbers with even number of digits

public int findNumbers(int[] nums) {
        int evenDigits = 0;
        int getDigits = 0;
        for (int i = 0; i < nums.length; i++){
            getDigits = String.valueOf(nums[i]).length();
	    //alternatively, we can use logarithms to get it instead of converting
	    //getDigits = (int)(Math.log10(nums[i])+1);
            if (getDigits % 2 == 0)
                evenDigits++;
        }
        return evenDigits;
}
#+END_SRC

- operations involving integers will have integer results, such as 
- parseInt()
- Math.round()
- Math.ceil()
- Math.floor()
- Math.sin()
- Math.toRadians()
- Math.max(a,b) - returns greater number of 2 parameters
- Math.min(a,b)
- Math.pow(base, exponent)

* Strings
- .toLowerCase() and .toUpperCase()
- .strip() - remove spaces. I usually use it like String s = sc.nextLine().strip();
- .equals() - for comparing strings. using == on strings will only compare its memory addresses
- .startWith()
- valueOf()
- contains()
- substring()
- .split() - splits string based on parameter or regex and removes these certain characters. for example, the following code takes an input string of words with spaces, and puts it in an array of strings with just the words (no spaces): **String[] s = in.nextLine().split(" ");**
- .charAt()
- .length() - method call for strings, it's different from just simply .length which is an array property, a common mistake i make

* Collections
- Arrays.toString() for printing single arrays
- Arrays.deepToString() for printing multi-dimensional arrays
- .size() count size of hashset
- .isEmpty() check if hashset is empty

* datastruc
- static arrays: int[] arr;

- dynamic arrays: it's called ArrayList in Java 
#+BEGIN_SRC java
ArrayList <Integer> al = new ArrayList <>(); 
#+END_SRC
 
- We can give it a size so it wont resize itself: 
#+BEGIN_SRC java
ArrayList <Integer> al = new ArrayList <>(30);
#+END_SRC

- sorting static arrays (ascending): Arrays.sort()
- sorting dynamic arrays (ascending): Collections.sort(list)

- Stack: LIFO. 
#+BEGIN_SRC java
Stack <Integer> st = new Stack <>();
#+END_SRC

- Queue: Java doesnt have a queue, we use linkedlist instead. 
#+BEGIN_SRC java
Queue <Integer> st = new LinkedList<>();
#+END_SRC

- Deque: double ended queue, the class is called ArrayDeque in Java.
#+BEGIN_SRC java
ArrayDeque <Integer> dq = new ArrayDeque<>();
#+END_SRC

- Priority Queue:
#+BEGIN_SRC java
PriorityQueue<Integer> pq = new PriorityQueue<>();
#+END_SRC


- Ordered Map: TreeMap
#+BEGIN_SRC java

#+END_SRC

- Unordered Map: HashMap
#+BEGIN_SRC java

#+END_SRC

- Unordered Set: HashSet
#+BEGIN_SRC java
HashSet<Integer> hs = new HashSet<>();
#+END_SRC

- Ordered Set: TreeSet
#+BEGIN_SRC java
TreeSet<Integer> ts = new TreeSet<>();
#+END_SRC

- Multiset: nothing in Java, instead we implement with TreeMap
#+BEGIN_SRC java

#+END_SRC

* datastruc misc
- stack to traverse tree without recursion
- graphs: store them globally
